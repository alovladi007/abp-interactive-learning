version: '3.9'

services:
  # ========== Databases ==========
  postgres:
    image: postgres:15-alpine
    container_name: qbank-postgres
    environment:
      POSTGRES_USER: qbank
      POSTGRES_PASSWORD: qbank_secure_pwd
      POSTGRES_DB: qbank
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - qbank-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qbank"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: qbank-redis
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - qbank-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========== Message Queue ==========
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: qbank-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - qbank-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: qbank-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "29092:29092"
      - "9092:9092"
    networks:
      - qbank-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: qbank-kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    networks:
      - qbank-network

  # ========== Search & Analytics ==========
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: qbank-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - qbank-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  clickhouse:
    image: clickhouse/clickhouse-server:23.10
    container_name: qbank-clickhouse
    environment:
      CLICKHOUSE_DB: qbank
      CLICKHOUSE_USER: qbank
      CLICKHOUSE_PASSWORD: qbank_secure_pwd
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - qbank-network

  # ========== Application Services ==========
  backend:
    build:
      context: ./qbank-backend
      dockerfile: Dockerfile
    container_name: qbank-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://qbank:qbank_secure_pwd@postgres:5432/qbank
      REDIS_URL: redis://redis:6379/0
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      ELASTICSEARCH_URL: http://elasticsearch:9200
      CLICKHOUSE_URL: clickhouse://qbank:qbank_secure_pwd@clickhouse:9000/qbank
      SECRET_KEY: ${SECRET_KEY:-change_me_in_production}
      ENVIRONMENT: development
    ports:
      - "8000:8000"
    networks:
      - qbank-network
    volumes:
      - ./qbank-backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  worker:
    build:
      context: ./qbank-backend
      dockerfile: Dockerfile
    container_name: qbank-worker
    depends_on:
      - backend
    environment:
      DATABASE_URL: postgresql+asyncpg://qbank:qbank_secure_pwd@postgres:5432/qbank
      REDIS_URL: redis://redis:6379/0
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - qbank-network
    volumes:
      - ./qbank-backend:/app
    command: python -m app.jobs.worker

  celery-worker:
    build:
      context: ./qbank-backend
      dockerfile: Dockerfile
    container_name: qbank-celery-worker
    depends_on:
      - backend
      - redis
    environment:
      DATABASE_URL: postgresql+asyncpg://qbank:qbank_secure_pwd@postgres:5432/qbank
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
    networks:
      - qbank-network
    volumes:
      - ./qbank-backend:/app
    command: celery -A app.jobs.celery_app worker --loglevel=info

  celery-beat:
    build:
      context: ./qbank-backend
      dockerfile: Dockerfile
    container_name: qbank-celery-beat
    depends_on:
      - celery-worker
    environment:
      DATABASE_URL: postgresql+asyncpg://qbank:qbank_secure_pwd@postgres:5432/qbank
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
    networks:
      - qbank-network
    volumes:
      - ./qbank-backend:/app
    command: celery -A app.jobs.celery_app beat --loglevel=info

  flower:
    image: mher/flower:2.0
    container_name: qbank-flower
    depends_on:
      - celery-worker
    environment:
      CELERY_BROKER_URL: redis://redis:6379/1
      FLOWER_PORT: 5555
    ports:
      - "5555:5555"
    networks:
      - qbank-network

  # ========== Monitoring ==========
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: qbank-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - qbank-network

  grafana:
    image: grafana/grafana:10.2.0
    container_name: qbank-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - qbank-network

  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: qbank-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    networks:
      - qbank-network

networks:
  qbank-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  clickhouse_data:
  prometheus_data:
  grafana_data: