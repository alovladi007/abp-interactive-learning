version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: eureka_postgres
    environment:
      POSTGRES_DB: eureka_db
      POSTGRES_USER: eureka_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-eureka_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - eureka_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eureka_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: eureka_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - eureka_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: eureka_elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - eureka_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # RabbitMQ for Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: eureka_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-eureka}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-eureka_password}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - eureka_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: eureka_backend
    environment:
      DATABASE_URL: postgresql://eureka_user:${DB_PASSWORD:-eureka_password}@postgres:5432/eureka_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      ELASTICSEARCH_URL: http://elasticsearch:9200
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-eureka}:${RABBITMQ_PASSWORD:-eureka_password}@rabbitmq:5672/
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      PAYPAL_CLIENT_ID: ${PAYPAL_CLIENT_ID}
      PAYPAL_CLIENT_SECRET: ${PAYPAL_CLIENT_SECRET}
      PAYPAL_MODE: ${PAYPAL_MODE:-sandbox}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
    volumes:
      - ./backend:/app/backend
      - ./static:/app/static
      - ./uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - eureka_network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: eureka_celery_worker
    command: celery -A backend.celery_app worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://eureka_user:${DB_PASSWORD:-eureka_password}@postgres:5432/eureka_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-eureka}:${RABBITMQ_PASSWORD:-eureka_password}@rabbitmq:5672/
    volumes:
      - ./backend:/app/backend
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - eureka_network
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: eureka_celery_beat
    command: celery -A backend.celery_app beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://eureka_user:${DB_PASSWORD:-eureka_password}@postgres:5432/eureka_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
    volumes:
      - ./backend:/app/backend
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - eureka_network
    restart: unless-stopped

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: eureka_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./marketplace.html:/usr/share/nginx/html/marketplace.html:ro
      - ./static:/usr/share/nginx/html/static:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - eureka_network
    restart: unless-stopped

  # Grafana for Monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: eureka_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - eureka_network
    restart: unless-stopped

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: eureka_prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - eureka_network
    restart: unless-stopped

networks:
  eureka_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  rabbitmq_data:
  grafana_data:
  prometheus_data: