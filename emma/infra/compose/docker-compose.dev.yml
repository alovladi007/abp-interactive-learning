version: '3.9'

services:
  # PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: emma-postgres
    environment:
      POSTGRES_USER: emma
      POSTGRES_PASSWORD: emma_password
      POSTGRES_DB: emma
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U emma"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: emma-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j
  neo4j:
    image: neo4j:5-community
    container_name: emma-neo4j
    environment:
      NEO4J_AUTH: neo4j/neo4j_password
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_memory_pagecache_size: 512M
      NEO4J_dbms_memory_heap_max__size: 512M
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "neo4j_password", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO
  minio:
    image: minio/minio:latest
    container_name: emma-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Service
  api:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.api
    container_name: emma-api
    environment:
      - PYTHON_ENV=development
      - DATABASE_URL=postgresql://emma:emma_password@postgres:5432/emma
      - REDIS_URL=redis://redis:6379/0
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=neo4j_password
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    ports:
      - "8000:8000"
    volumes:
      - ../../apps/api:/app/apps/api
      - ../../packages:/app/packages
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: uvicorn apps.api.main:app --host 0.0.0.0 --port 8000 --reload

  # Workers
  workers:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.workers
    container_name: emma-workers
    environment:
      - PYTHON_ENV=development
      - DATABASE_URL=postgresql://emma:emma_password@postgres:5432/emma
      - REDIS_URL=redis://redis:6379/0
      - NEO4J_URI=bolt://neo4j:7687
      - MINIO_ENDPOINT=minio:9000
    volumes:
      - ../../apps/workers:/app/apps/workers
      - ../../packages:/app/packages
    depends_on:
      - postgres
      - redis
      - neo4j
      - minio
    command: dramatiq apps.workers.tasks --watch apps.workers

  # Retriever Service
  retriever:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.retriever
    container_name: emma-retriever
    environment:
      - PYTHON_ENV=development
      - DATABASE_URL=postgresql://emma:emma_password@postgres:5432/emma
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
    ports:
      - "8001:8001"
    volumes:
      - ../../services/retriever:/app/services/retriever
      - ../../packages:/app/packages
    depends_on:
      - postgres
      - redis
      - minio

  # Sandbox Service
  sandbox:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.sandbox
    container_name: emma-sandbox
    privileged: true
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
    ports:
      - "8002:8002"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ../../services/sandbox:/app/services/sandbox
    security_opt:
      - apparmor:unconfined

  # Compute Bridge Service
  compute_bridge:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.compute
    container_name: emma-compute
    environment:
      - WOLFRAM_MODE=${WOLFRAM_MODE:-off}
      - WOLFRAM_APP_ID=${WOLFRAM_APP_ID:-}
      - MATLAB_MODE=${MATLAB_MODE:-off}
    ports:
      - "8003:8003"
    volumes:
      - ../../services/compute_bridge:/app/services/compute_bridge
      - ../../packages:/app/packages

  # Web Frontend
  web:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.web
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:8000
        - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    container_name: emma-web
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ../../apps/web:/app/apps/web
      - ../../packages/emma_ui:/app/packages/emma_ui
      - /app/apps/web/node_modules
      - /app/apps/web/.next
    depends_on:
      - api
    command: npm run dev

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  minio_data:

networks:
  default:
    name: emma-network