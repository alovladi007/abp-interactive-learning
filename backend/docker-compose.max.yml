version: '3.8'

services:
  # PostgreSQL database for MAX
  postgres:
    image: ankane/pgvector:latest
    container_name: max-postgres
    environment:
      POSTGRES_DB: max_db
      POSTGRES_USER: max_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - max_postgres_data:/var/lib/postgresql/data
      - ./database/max_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U max_user -d max_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - max-network

  # Neo4j for citation knowledge graph
  neo4j:
    image: neo4j:5.14-community
    container_name: max-neo4j
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-password}
      NEO4J_dbms_memory_pagecache_size: 1G
      NEO4J_dbms.memory.heap.initial_size: 1G
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_PLUGINS: '["graph-data-science", "apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: gds.*,apoc.*
      NEO4J_dbms_security_procedures_allowlist: gds.*,apoc.*
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - max_neo4j_data:/data
      - max_neo4j_logs:/logs
      - max_neo4j_import:/var/lib/neo4j/import
      - max_neo4j_plugins:/plugins
      - ./database/max_neo4j.cypher:/var/lib/neo4j/import/schema.cypher
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p ${NEO4J_PASSWORD:-password} 'RETURN 1'"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - max-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: max-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - max_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - max-network

  # MAX FastAPI backend
  max-backend:
    build:
      context: .
      dockerfile: Dockerfile.max
    container_name: max-backend
    environment:
      DATABASE_URL: postgresql://max_user:${POSTGRES_PASSWORD:-changeme}@postgres:5432/max_db
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password}
      REDIS_URL: redis://redis:6379
      SEMANTIC_SCHOLAR_API_KEY: ${SEMANTIC_SCHOLAR_API_KEY:-}
      LOG_LEVEL: INFO
      WORKERS: 4
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    volumes:
      - ./services:/app/services
      - ./api:/app/api
      - max_backend_cache:/app/.cache
    command: >
      uvicorn main:app
      --host 0.0.0.0
      --port 8000
      --workers 4
      --log-level info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/max/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - max-network

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.max
    container_name: max-celery-worker
    environment:
      DATABASE_URL: postgresql://max_user:${POSTGRES_PASSWORD:-changeme}@postgres:5432/max_db
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password}
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    depends_on:
      - redis
      - postgres
      - neo4j
    command: celery -A workers.celery_app worker --loglevel=info --concurrency=4
    volumes:
      - ./services:/app/services
      - ./workers:/app/workers
    networks:
      - max-network

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile.max
    container_name: max-flower
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    command: celery -A workers.celery_app flower --port=5555
    networks:
      - max-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: max-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf.max:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - max-backend
    networks:
      - max-network

volumes:
  max_postgres_data:
    driver: local
  max_neo4j_data:
    driver: local
  max_neo4j_logs:
    driver: local
  max_neo4j_import:
    driver: local
  max_neo4j_plugins:
    driver: local
  max_redis_data:
    driver: local
  max_backend_cache:
    driver: local

networks:
  max-network:
    driver: bridge
